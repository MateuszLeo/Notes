'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _lodash = require('lodash.isfunction');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.isobject');

var _lodash4 = _interopRequireDefault(_lodash3);

var _actions = require('./actions');

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function swallow() {}

function warnAboutConfusingFiltering(blacklist, whitelist) {
    blacklist.filter(function (item) {
        return whitelist.indexOf(item) !== -1;
    }).forEach(function (item) {
        console.warn( // eslint-disable-line no-console
        '[redux-storage] Action ' + item + ' is on BOTH black- and whitelist.' + ' This is most likely a mistake!');
    });
}

function isValidAction(action) {
    var isFunc = (0, _lodash2.default)(action);
    var isObj = (0, _lodash4.default)(action);
    var hasType = isObj && action.hasOwnProperty('type');

    if (!isFunc && isObj && hasType) {
        return true;
    }

    if (process.env.NODE_ENV !== 'production') {
        if (isFunc) {
            console.warn( // eslint-disable-line no-console
            '[redux-storage] ACTION IGNORED! Actions should be objects' + ' with a type property but received a function! Your' + ' function resolving middleware (e.g. redux-thunk) must be' + ' placed BEFORE redux-storage!');
        } else if (!isObj) {
            console.warn( // eslint-disable-line no-console
            '[redux-storage] ACTION IGNORED! Actions should be objects' + (' with a type property but received: ' + action));
        } else if (!hasType) {
            console.warn( // eslint-disable-line no-console
            '[redux-storage] ACTION IGNORED! Action objects should have' + ' a type property.');
        }
    }

    return false;
}

exports.default = function (engine) {
    var actionBlacklist = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
    var actionWhitelist = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

    // Also don't save if we process our own actions
    var blacklistedActions = [].concat(_toConsumableArray(actionBlacklist), [_constants.LOAD, _constants.SAVE]);

    if (process.env.NODE_ENV !== 'production') {
        warnAboutConfusingFiltering(actionBlacklist, actionWhitelist);
    }

    return function (_ref) {
        var dispatch = _ref.dispatch;
        var getState = _ref.getState;

        return function (next) {
            return function (action) {
                var result = next(action);

                if (!isValidAction(action)) {
                    return result;
                }

                var isOnBlacklist = blacklistedActions.indexOf(action.type) !== -1;
                var isOnWhitelist = actionWhitelist.length === 0 ? true // Don't filter if the whitelist is empty
                : actionWhitelist.indexOf(action.type) !== -1;

                // Skip blacklisted actions
                if (!isOnBlacklist && isOnWhitelist) {
                    (function () {
                        var saveState = getState();
                        var saveAction = (0, _actions.save)(saveState);

                        if (process.env.NODE_ENV !== 'production') {
                            if (!saveAction.meta) {
                                saveAction.meta = {};
                            }
                            saveAction.meta.origin = action;
                        }

                        var dispatchSave = function dispatchSave() {
                            return dispatch(saveAction);
                        };
                        engine.save(saveState).then(dispatchSave)['catch'](swallow);
                    })();
                }

                return result;
            };
        };
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVNaWRkbGV3YXJlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFNQSxTQUFTLE9BQVQsR0FBbUIsRUFBbkI7O0FBR0EsU0FBUywyQkFBVCxDQUFxQyxTQUFyQyxFQUFnRCxTQUFoRCxFQUEyRDtBQUN2RCxjQUNLLE1BREwsQ0FDWSxVQUFDLElBQUQ7ZUFBVSxVQUFVLE9BQVYsQ0FBa0IsSUFBbEIsTUFBNEIsQ0FBQyxDQUFEO0tBQXRDLENBRFosQ0FFSyxPQUZMLENBRWEsVUFBQyxJQUFELEVBQVU7QUFDZixnQkFBUSxJQUFSO0FBQ0ksb0NBQTBCLDBDQUExQixvQ0FESixFQURlO0tBQVYsQ0FGYixDQUR1RDtDQUEzRDs7QUFXQSxTQUFTLGFBQVQsQ0FBdUIsTUFBdkIsRUFBK0I7QUFDM0IsUUFBTSxTQUFTLHNCQUFXLE1BQVgsQ0FBVCxDQURxQjtBQUUzQixRQUFNLFFBQVEsc0JBQVMsTUFBVCxDQUFSLENBRnFCO0FBRzNCLFFBQU0sVUFBVSxTQUFTLE9BQU8sY0FBUCxDQUFzQixNQUF0QixDQUFULENBSFc7O0FBSzNCLFFBQUksQ0FBQyxNQUFELElBQVcsS0FBWCxJQUFvQixPQUFwQixFQUE2QjtBQUM3QixlQUFPLElBQVAsQ0FENkI7S0FBakM7O0FBSUEsUUFBSSxRQUFRLEdBQVIsQ0FBWSxRQUFaLEtBQXlCLFlBQXpCLEVBQXVDO0FBQ3ZDLFlBQUksTUFBSixFQUFZO0FBQ1Isb0JBQVEsSUFBUjtBQUNJLCtOQURKLEVBRFE7U0FBWixNQU9PLElBQUksQ0FBQyxLQUFELEVBQVE7QUFDZixvQkFBUSxJQUFSO0FBQ0ksb0hBQ3lDLE9BRHpDLENBREosQ0FEZTtTQUFaLE1BS0EsSUFBSSxDQUFDLE9BQUQsRUFBVTtBQUNqQixvQkFBUSxJQUFSO0FBQ0ksOEZBREosRUFEaUI7U0FBZDtLQWJYOztBQXFCQSxXQUFPLEtBQVAsQ0E5QjJCO0NBQS9COztrQkFrQ2UsVUFBQyxNQUFELEVBQXdEO1FBQS9DLHdFQUFrQixrQkFBNkI7UUFBekIsd0VBQWtCLGtCQUFPOzs7QUFFbkUsUUFBTSxrREFBeUIscURBQXpCLENBRjZEOztBQUluRSxRQUFJLFFBQVEsR0FBUixDQUFZLFFBQVosS0FBeUIsWUFBekIsRUFBdUM7QUFDdkMsb0NBQTRCLGVBQTVCLEVBQTZDLGVBQTdDLEVBRHVDO0tBQTNDOztBQUlBLFdBQU8sZ0JBQTRCO1lBQXpCLHlCQUF5QjtZQUFmLHlCQUFlOztBQUMvQixlQUFPLFVBQUMsSUFBRDttQkFBVSxVQUFDLE1BQUQsRUFBWTtBQUN6QixvQkFBTSxTQUFTLEtBQUssTUFBTCxDQUFULENBRG1COztBQUd6QixvQkFBSSxDQUFDLGNBQWMsTUFBZCxDQUFELEVBQXdCO0FBQ3hCLDJCQUFPLE1BQVAsQ0FEd0I7aUJBQTVCOztBQUlBLG9CQUFNLGdCQUFnQixtQkFBbUIsT0FBbkIsQ0FBMkIsT0FBTyxJQUFQLENBQTNCLEtBQTRDLENBQUMsQ0FBRCxDQVB6QztBQVF6QixvQkFBTSxnQkFBZ0IsZ0JBQWdCLE1BQWhCLEtBQTJCLENBQTNCLEdBQ2hCO0FBRGdCLGtCQUVoQixnQkFBZ0IsT0FBaEIsQ0FBd0IsT0FBTyxJQUFQLENBQXhCLEtBQXlDLENBQUMsQ0FBRDs7O0FBVnRCLG9CQWFyQixDQUFDLGFBQUQsSUFBa0IsYUFBbEIsRUFBaUM7O0FBQ2pDLDRCQUFNLFlBQVksVUFBWjtBQUNOLDRCQUFNLGFBQWEsbUJBQVcsU0FBWCxDQUFiOztBQUVOLDRCQUFJLFFBQVEsR0FBUixDQUFZLFFBQVosS0FBeUIsWUFBekIsRUFBdUM7QUFDdkMsZ0NBQUksQ0FBQyxXQUFXLElBQVgsRUFBaUI7QUFDbEIsMkNBQVcsSUFBWCxHQUFrQixFQUFsQixDQURrQjs2QkFBdEI7QUFHQSx1Q0FBVyxJQUFYLENBQWdCLE1BQWhCLEdBQXlCLE1BQXpCLENBSnVDO3lCQUEzQzs7QUFPQSw0QkFBTSxlQUFlLFNBQWYsWUFBZTttQ0FBTSxTQUFTLFVBQVQ7eUJBQU47QUFDckIsK0JBQU8sSUFBUCxDQUFZLFNBQVosRUFBdUIsSUFBdkIsQ0FBNEIsWUFBNUIsV0FBZ0QsT0FBaEQ7eUJBWmlDO2lCQUFyQzs7QUFlQSx1QkFBTyxNQUFQLENBNUJ5QjthQUFaO1NBQVYsQ0FEd0I7S0FBNUIsQ0FSNEQ7Q0FBeEQiLCJmaWxlIjoiY3JlYXRlTWlkZGxld2FyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJ2xvZGFzaC5pc2Z1bmN0aW9uJztcbmltcG9ydCBpc09iamVjdCBmcm9tICdsb2Rhc2guaXNvYmplY3QnO1xuXG5pbXBvcnQgeyBzYXZlIGFzIGFjdGlvblNhdmUgfSBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IHsgTE9BRCwgU0FWRSB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuZnVuY3Rpb24gc3dhbGxvdygpIHtcbn1cblxuZnVuY3Rpb24gd2FybkFib3V0Q29uZnVzaW5nRmlsdGVyaW5nKGJsYWNrbGlzdCwgd2hpdGVsaXN0KSB7XG4gICAgYmxhY2tsaXN0XG4gICAgICAgIC5maWx0ZXIoKGl0ZW0pID0+IHdoaXRlbGlzdC5pbmRleE9mKGl0ZW0pICE9PSAtMSlcbiAgICAgICAgLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybiggLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgYFtyZWR1eC1zdG9yYWdlXSBBY3Rpb24gJHtpdGVtfSBpcyBvbiBCT1RIIGJsYWNrLSBhbmQgd2hpdGVsaXN0LmBcbiAgICAgICAgICAgICAgICArIGAgVGhpcyBpcyBtb3N0IGxpa2VseSBhIG1pc3Rha2UhYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRBY3Rpb24oYWN0aW9uKSB7XG4gICAgY29uc3QgaXNGdW5jID0gaXNGdW5jdGlvbihhY3Rpb24pO1xuICAgIGNvbnN0IGlzT2JqID0gaXNPYmplY3QoYWN0aW9uKTtcbiAgICBjb25zdCBoYXNUeXBlID0gaXNPYmogJiYgYWN0aW9uLmhhc093blByb3BlcnR5KCd0eXBlJyk7XG5cbiAgICBpZiAoIWlzRnVuYyAmJiBpc09iaiAmJiBoYXNUeXBlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChpc0Z1bmMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybiggLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgYFtyZWR1eC1zdG9yYWdlXSBBQ1RJT04gSUdOT1JFRCEgQWN0aW9ucyBzaG91bGQgYmUgb2JqZWN0c2BcbiAgICAgICAgICAgICAgICArIGAgd2l0aCBhIHR5cGUgcHJvcGVydHkgYnV0IHJlY2VpdmVkIGEgZnVuY3Rpb24hIFlvdXJgXG4gICAgICAgICAgICAgICAgKyBgIGZ1bmN0aW9uIHJlc29sdmluZyBtaWRkbGV3YXJlIChlLmcuIHJlZHV4LXRodW5rKSBtdXN0IGJlYFxuICAgICAgICAgICAgICAgICsgYCBwbGFjZWQgQkVGT1JFIHJlZHV4LXN0b3JhZ2UhYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmICghaXNPYmopIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybiggLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgYFtyZWR1eC1zdG9yYWdlXSBBQ1RJT04gSUdOT1JFRCEgQWN0aW9ucyBzaG91bGQgYmUgb2JqZWN0c2BcbiAgICAgICAgICAgICAgICArIGAgd2l0aCBhIHR5cGUgcHJvcGVydHkgYnV0IHJlY2VpdmVkOiAke2FjdGlvbn1gXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKCFoYXNUeXBlKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgIGBbcmVkdXgtc3RvcmFnZV0gQUNUSU9OIElHTk9SRUQhIEFjdGlvbiBvYmplY3RzIHNob3VsZCBoYXZlYFxuICAgICAgICAgICAgICAgICsgYCBhIHR5cGUgcHJvcGVydHkuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuXG5leHBvcnQgZGVmYXVsdCAoZW5naW5lLCBhY3Rpb25CbGFja2xpc3QgPSBbXSwgYWN0aW9uV2hpdGVsaXN0ID0gW10pID0+IHtcbiAgICAvLyBBbHNvIGRvbid0IHNhdmUgaWYgd2UgcHJvY2VzcyBvdXIgb3duIGFjdGlvbnNcbiAgICBjb25zdCBibGFja2xpc3RlZEFjdGlvbnMgPSBbLi4uYWN0aW9uQmxhY2tsaXN0LCBMT0FELCBTQVZFXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm5BYm91dENvbmZ1c2luZ0ZpbHRlcmluZyhhY3Rpb25CbGFja2xpc3QsIGFjdGlvbldoaXRlbGlzdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuICh7IGRpc3BhdGNoLCBnZXRTdGF0ZSB9KSA9PiB7XG4gICAgICAgIHJldHVybiAobmV4dCkgPT4gKGFjdGlvbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV4dChhY3Rpb24pO1xuXG4gICAgICAgICAgICBpZiAoIWlzVmFsaWRBY3Rpb24oYWN0aW9uKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGlzT25CbGFja2xpc3QgPSBibGFja2xpc3RlZEFjdGlvbnMuaW5kZXhPZihhY3Rpb24udHlwZSkgIT09IC0xO1xuICAgICAgICAgICAgY29uc3QgaXNPbldoaXRlbGlzdCA9IGFjdGlvbldoaXRlbGlzdC5sZW5ndGggPT09IDBcbiAgICAgICAgICAgICAgICA/IHRydWUgLy8gRG9uJ3QgZmlsdGVyIGlmIHRoZSB3aGl0ZWxpc3QgaXMgZW1wdHlcbiAgICAgICAgICAgICAgICA6IGFjdGlvbldoaXRlbGlzdC5pbmRleE9mKGFjdGlvbi50eXBlKSAhPT0gLTE7XG5cbiAgICAgICAgICAgIC8vIFNraXAgYmxhY2tsaXN0ZWQgYWN0aW9uc1xuICAgICAgICAgICAgaWYgKCFpc09uQmxhY2tsaXN0ICYmIGlzT25XaGl0ZWxpc3QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzYXZlU3RhdGUgPSBnZXRTdGF0ZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNhdmVBY3Rpb24gPSBhY3Rpb25TYXZlKHNhdmVTdGF0ZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXNhdmVBY3Rpb24ubWV0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUFjdGlvbi5tZXRhID0ge307XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2F2ZUFjdGlvbi5tZXRhLm9yaWdpbiA9IGFjdGlvbjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBkaXNwYXRjaFNhdmUgPSAoKSA9PiBkaXNwYXRjaChzYXZlQWN0aW9uKTtcbiAgICAgICAgICAgICAgICBlbmdpbmUuc2F2ZShzYXZlU3RhdGUpLnRoZW4oZGlzcGF0Y2hTYXZlKS5jYXRjaChzd2FsbG93KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICB9O1xufTtcbiJdfQ==